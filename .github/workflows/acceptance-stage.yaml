name: Acceptance stage

on:
  workflow_call:
    # Map the workflow outputs to job outputs
    inputs:
      triggering-sha:
        required: true
        type: string

defaults:
  run:
    shell: bash
    working-directory: service

env:
  # GHA SETTINGS
  USE_COMPOSER_CACHE: '1'
  USE_PHP_EXTENSION_CACHE: '1'
  # PHP SETTINGS
  PHP_EXTENSIONS: json
  PHP_EXTENSIONS_CACHE_KEY: cache-php-extensions-v1

jobs:
  app-preconditions-checks:
    name: App preconditions checks ${{ matrix.php-version }}
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    services:
      pgsql:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: ci-db_test
          POSTGRES_PASSWORD: ci-db-password
          POSTGRES_USER: ci-db-user
        ports:
          - 5432/tcp
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
    strategy:
      matrix:
        php-version:
          - '8.2'
      fail-fast: true
    steps:
      - name: Checkout on SHA-${{ inputs.triggering-sha }}
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.triggering-sha }}

      - name: Setup PHP and composer dependencies
        uses: './.github/actions/php-composer-setup'
        with:
          php-version: ${{ matrix.php-version }}
          composer-working-directory: 'service'
          php-extensions: ${{ env.PHP_EXTENSIONS }}
          extensions-cache-key:  ${{ env.PHP_EXTENSIONS_CACHE_KEY }}
          use-php-extensions-cache: ${{ env.USE_PHP_EXTENSION_CACHE }}
          use-composer-cache: ${{ env.USE_COMPOSER_CACHE }}
          composer-install-args: '--no-interaction --prefer-dist --no-progress --ansi'

      - name: Run database migrations
        if: ${{ github.ref_name == 'main' }}
        run: ./bin/console doctrine:migrations:migrate -e test -n -vv --allow-no-migration --ansi
        env:
          DATABASE_URL: postgres://ci-db-user:ci-db-password@127.0.0.1:${{ job.services.pgsql.ports['5432'] }}/ci-db?serverVersion=16&charset=utf8

      - name: Run database schema update
        if: ${{ github.ref_name != 'main' }}
        run: ./bin/console doctrine:schema:update -e test --complete --force --ansi
        env:
          DATABASE_URL: postgres://ci-db-user:ci-db-password@127.0.0.1:${{ job.services.pgsql.ports['5432'] }}/ci-db?serverVersion=16&charset=utf8

      - name: Run database schema validate
        run: ./bin/console doctrine:schema:validate -e test --ansi
        env:
          DATABASE_URL: postgres://ci-db-user:ci-db-password@127.0.0.1:${{ job.services.pgsql.ports['5432'] }}/ci-db?serverVersion=16&charset=utf8

  integration-test:
    name: Integration tests ${{ matrix.php-version }}
    runs-on: ubuntu-20.04
    needs:
      - app-preconditions-checks
    timeout-minutes: 15
    services:
      pgsql:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: ci-db_test
          POSTGRES_PASSWORD: ci-db-password
          POSTGRES_USER: ci-db-user
        ports:
          - 5432/tcp
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
    strategy:
      matrix:
        php-version:
          - '8.2'
        is-php-experimental: [false]
        generate-coverage-report: [false]
        include:
          - php-version: '8.3'
            is-php-experimental: false
            generate-coverage-report: false
      fail-fast: true
    steps:
      - name: Checkout on SHA-${{ inputs.triggering-sha }}
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.triggering-sha }}

      - name: Setup PHP and composer dependencies
        uses: './.github/actions/php-composer-setup'
        with:
          php-version: ${{ matrix.php-version }}
          composer-working-directory: 'service'
          php-extensions: ${{ env.PHP_EXTENSIONS }}
          extensions-cache-key:  ${{ env.PHP_EXTENSIONS_CACHE_KEY }}
          use-php-extensions-cache: ${{ env.USE_PHP_EXTENSION_CACHE }}
          use-composer-cache: ${{ env.USE_COMPOSER_CACHE }}
          composer-install-args: '--no-interaction --prefer-dist --no-progress --ansi'

      - name: Run Integration tests
        if: ${{ !matrix.generate-coverage-report }}
        run: |
            vendor/bin/phpunit --testsuite=integration --testdox --colors=always


  functional-test:
    name: Functional tests ${{ matrix.php-version }}
    runs-on: ubuntu-20.04
    needs:
      - app-preconditions-checks
    timeout-minutes: 15
    services:
      pgsql:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: ci-db_test
          POSTGRES_PASSWORD: ci-db-password
          POSTGRES_USER: ci-db-user
        ports:
          - 5432/tcp
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
    strategy:
      matrix:
        php-version:
          - '8.2'
        is-php-experimental: [false]
        generate-coverage-report: [false]
        include:
          - php-version: '8.3'
            is-php-experimental: false
            generate-coverage-report: false
      fail-fast: true
    steps:
      - name: Checkout on SHA-${{ inputs.triggering-sha }}
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.triggering-sha }}

      - name: Setup PHP and composer dependencies
        uses: './.github/actions/php-composer-setup'
        with:
          php-version: ${{ matrix.php-version }}
          composer-working-directory: 'service'
          php-extensions: ${{ env.PHP_EXTENSIONS }}
          extensions-cache-key:  ${{ env.PHP_EXTENSIONS_CACHE_KEY }}
          use-php-extensions-cache: ${{ env.USE_PHP_EXTENSION_CACHE }}
          use-composer-cache: ${{ env.USE_COMPOSER_CACHE }}
          composer-install-args: '--no-interaction --prefer-dist --no-progress --ansi'
          tools: symfony

      - name: Run webserver
        run: symfony server:start --port=8080 --dir=public --daemon --no-tls

      - name: Run Functional tests
        if: ${{ !matrix.generate-coverage-report }}
        run: |
            vendor/bin/phpunit --testsuite=functional --testdox --colors=always
