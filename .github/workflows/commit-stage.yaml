name: Commit stage

on:
  workflow_call:
    # Map the workflow outputs to job outputs
    inputs:
      triggering-sha:
        required: true
        type: string

defaults:
  run:
    shell: bash
    working-directory: service
    
env:
  # GHA SETTINGS
  USE_COMPOSER_CACHE: '1'
  USE_PHP_EXTENSION_CACHE: '1'
  # PHP SETTINGS
  PHP_EXTENSIONS: json
  PHP_EXTENSIONS_CACHE_KEY: cache-php-extensions-v1

jobs:
  commit-checks:
    name: Commit checks ${{ matrix.php-version }}
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    strategy:
      matrix:
        php-version:
          - '8.2'
      fail-fast: false
    steps:
      - name: Checkout on SHA-${{ inputs.triggering-sha }}
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.triggering-sha }}

      - name: Setup PHP and composer dependencies
        uses: './.github/actions/php-composer-setup'
        with:
          php-version: ${{ matrix.php-version }}
          composer-working-directory: 'service'
          php-extensions: ${{ env.PHP_EXTENSIONS }}
          extensions-cache-key:  ${{ env.PHP_EXTENSIONS_CACHE_KEY }}
          use-php-extensions-cache: ${{ env.USE_PHP_EXTENSION_CACHE }}
          use-composer-cache: ${{ env.USE_COMPOSER_CACHE }}
          composer-install-args: '--no-interaction --prefer-dist --no-progress --ansi'
          tools: 'composer-normalize:2.16.0'

      - name: Run composer validate
        run: |
          composer validate --strict --ansi

      - name: Run composer normalize
        if: always()
        run: |
          composer-normalize --dry-run --ansi

      - name: Run composer audit
        if: always()
        run: |
          composer audit --ansi

      - name: Run CODING STANDARDS checks
        if: always()
        run: |
          composer bin ecs install
          ./vendor/bin/ecs --ansi

      - name: Run STATIC ANALYSIS
        if: always()
        run: |
          ./bin/console lint:container -e dev --ansi
          composer bin phpstan install
          ./vendor/bin/phpstan

      - name: Run RECTOR (Maintenance)
        if: always()
        run: |
          ./bin/console lint:container -e dev --ansi
          composer bin rector install
          ./vendor/bin/rector --dry-run

      - name: Run yml linter on configurations files
        run: |
          ./bin/console lint:yaml config/ --ansi

      - name: Run linter on symfony containers (prod|dev)
        run: |
          ./bin/console lint:container -e prod --ansi
          ./bin/console lint:container -e dev --ansi
        continue-on-error: true

      # - name: Run linter on all twig templates
      #   run: |
      #     ./bin/console lint:twig --ansi
      #   env:
      #     APP_ENV: dev



  unit-test:
      name: Unit tests ${{ matrix.php-version }}
      runs-on: ubuntu-22.04
      timeout-minutes: 10
      continue-on-error: ${{ matrix.is-php-experimental }}
      strategy:
          max-parallel: 5
          matrix:
              php-version:
                  - '8.2'
              is-php-experimental: [false]
              generate-coverage-report: [false]
              include:
                - php-version: '8.3'
                  is-php-experimental: false
                  generate-coverage-report: false
                - php-version: '8.4'
                  is-php-experimental: false
                  generate-coverage-report: false
          fail-fast: true
      steps:
          - name: Checkout on SHA-${{ inputs.triggering-sha }}
            uses: actions/checkout@v4
            with:
                ref: ${{ inputs.triggering-sha }}

          - name: Setup PHP and composer dependencies
            uses: './.github/actions/php-composer-setup'
            with:
              php-version: ${{ matrix.php-version }}
              composer-working-directory: 'service'
              php-extensions: ${{ env.PHP_EXTENSIONS }}
              extensions-cache-key:  ${{ env.PHP_EXTENSIONS_CACHE_KEY }}
              use-php-extensions-cache: ${{ env.USE_PHP_EXTENSION_CACHE }}
              use-composer-cache: ${{ env.USE_COMPOSER_CACHE }}
              composer-install-args: '--no-interaction --prefer-dist --no-progress --ansi'
              ini-values: memory_limit=-1
              coverage: xdebug

          - name: Run unit tests
            if: ${{ !matrix.generate-coverage-report }}
            run: |
                vendor/bin/phpunit --testsuite=unit --testdox --colors=always

          - name: Run unit tests WITH COVERAGE
            if: ${{ matrix.generate-coverage-report }}
            run: |
                vendor/bin/phpunit --testsuite=unit --testdox --colors=always \
                --coverage-clover ${{ vars.UNIT_TEST_CLOVER_FILENAME }} \
                --testdox-text ${{ vars.UNIT_TEST_DOC_FILENAME }}

          - name: Get Coverage artifact name
            if: ${{ matrix.generate-coverage-report }}
            id: coverage-artifact-name
            run: echo "name=${{ vars.ARTIFATC_NAME_FOR_UNIT_TESTS_COVERAGE }}-$GITHUB_SHA" >> $GITHUB_OUTPUT

          - name: Save coverage reports
            if: ${{ matrix.generate-coverage-report }}
            uses: actions/upload-artifact@v4
            with:
                name: ${{ steps.coverage-artifact-name.outputs.name }}
                path: ${{ vars.UNIT_TEST_CLOVER_FILENAME }}

          - name: Get Test doc artifact name
            if: ${{ matrix.generate-coverage-report }}
            id: test-doc-artifact-name
            run: echo "name=${{ vars.ARTIFATC_NAME_FOR_UNIT_TESTS_DOCUMENTATION_REPORT }}-$GITHUB_SHA" >> $GITHUB_OUTPUT

          - name: Save test doc reports
            if: ${{ matrix.generate-coverage-report }}
            uses: actions/upload-artifact@v4
            with:
                name: ${{ steps.test-doc-artifact-name.outputs.name }}
                path: ${{ vars.UNIT_TEST_DOC_FILENAME }}


